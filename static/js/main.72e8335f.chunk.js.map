{"version":3,"sources":["logo.svg","components/NavigationBar.js","components/Home.js","components/cookbook/RecipeMaker.js","components/CookBook.js","components/NoMatch.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Styles","styled","div","NavigationBar","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Item","Link","GridWrapper","Home","props","StyledRecipeMaker","RecipeMaker","Form","FormControl","type","placeholder","React","Component","CookBook","Wrapper","NoMatch","StyledSideNav","StyledNavItem","active","NavIcon","NavItem","handleClick","path","onItemClick","this","to","css","onClick","SideNav","setState","activePath","state","location","pathname","items","name","key","map","item","Sidebar","RouterSideNav","withRouter","App","Fragment","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.72e8335f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport { Nav, Navbar, Form, FormControl } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nconst Styles = styled.div`\r\n  .navbar { background-color: #222; }\r\n  a, .navbar-nav, .navbar-light .nav-link {\r\n    color: white;\r\n    &:hover { color: #9FFFCB; }\r\n  }\r\n  .navbar-brand {\r\n    font-size: 1.4em;\r\n    color: white;\r\n    &:hover { color: #9FFFCB; }\r\n  }\r\n  .form-center {\r\n    position: absolute !important;\r\n    left: 25%;\r\n    right: 25%;\r\n  }\r\n`;\r\nexport const NavigationBar = () => (\r\n  <Styles>\r\n    <Navbar expand=\"lg\">\r\n      <Navbar.Brand href=\"/\">App Book</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n      {/* <Form className=\"form-center\">\r\n        <FormControl type=\"text\" placeholder=\"Search\" className=\"\" />\r\n      </Form> */}\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Item><Nav.Link href=\"/\">Home</Nav.Link></Nav.Item> \r\n          <Nav.Item><Nav.Link href=\"/about\">Cook Book</Nav.Link></Nav.Item>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  </Styles>\r\n)","import React from 'react';\r\nimport styled from 'styled-components';\r\nconst GridWrapper = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  margin-top: 1em;\r\n  margin-left: 6em;\r\n  margin-right: 6em;\r\n  grid-template-columns: repeat(12, 1fr);\r\n  grid-auto-rows: minmax(25px, auto);\r\n`;\r\nexport const Home = (props) => (\r\n  <GridWrapper>\r\n    <p>This is a paragraph and I am writing on the home page</p>\r\n    <p>This is another paragraph, hi hey hello whatsup yo</p>\r\n  </GridWrapper>\r\n)","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport { Form, FormControl } from 'react-bootstrap';\r\n\r\nconst StyledRecipeMaker = styled.div`\r\n  position: fixed;     /* Fixed Sidebar (stay in place on scroll and position relative to viewport) */\r\n  min-height: 20%;\r\n  width: 90%;     /* Set the width of the sidebar */\r\n  background-color: #091742; /* Black */\r\n  overflow-x: hidden;     /* Disable horizontal scroll */\r\n    margin-left: 5%;\r\n    margin-top: 1%;\r\n\r\n    .form-center {\r\n        position: absolute !important;\r\n        top: 10%;\r\n        left: 25%;\r\n        right: 25%;\r\n      }\r\n`;\r\n\r\nexport default class RecipeMaker extends React.Component {\r\n    render() {\r\n      return (\r\n\r\n        <StyledRecipeMaker>\r\n             <Form className=\"form-center\">\r\n                <FormControl type=\"text\" placeholder=\"Pick Ingredients\" className=\"\" />\r\n             </Form>\r\n        </StyledRecipeMaker>\r\n\r\n      );\r\n    }\r\n  }","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport RecipeMaker from './cookbook/RecipeMaker';\r\nconst GridWrapper = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n  margin-top: 1em;\r\n  margin-left: 6em;\r\n  margin-right: 6em;\r\n  grid-template-columns: repeat(12, 1fr);\r\n  grid-auto-rows: minmax(25px, auto);\r\n`; \r\nexport const CookBook = () => (\r\n  <RecipeMaker>\r\n    </RecipeMaker>\r\n   \r\n)","import React from 'react';\r\nimport styled from 'styled-components';\r\nconst Wrapper = styled.div`\r\n  margin-top: 1em;\r\n  margin-left: 6em;\r\n  margin-right: 6em;\r\n`;\r\nexport const NoMatch = () => (\r\n  <Wrapper>\r\n    <h2>No Match</h2>\r\n  </Wrapper>\r\n)","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport { BrowserRouter as Router, Route, Link, withRouter } from \"react-router-dom\";\r\n\r\nconst StyledSideNav = styled.div`\r\n  position: fixed;     /* Fixed Sidebar (stay in place on scroll and position relative to viewport) */\r\n  height: 100%;\r\n  width: 4%;     /* Set the width of the sidebar */\r\n  z-index: 1;      /* Stay on top of everything */\r\n  top: 3.4em;      /* Stay at the top */\r\n  background-color: #222; /* Black */\r\n  overflow-x: hidden;     /* Disable horizontal scroll */\r\n  padding: 10px;\r\n`;\r\nconst StyledNavItem = styled.div`\r\n  height: 10%;\r\n  width: 4%; /* width must be same size as NavBar to center */\r\n  text-align: center; /* Aligns <a> inside of NavIcon div */\r\n  margin-bottom: 0;   /* Puts space between NavItems */\r\n  a {\r\n    font-size: 1.8em;\r\n    color: ${(props) => props.active ? \"white\" : \"#9FFFCB\"};\r\n    :hover {\r\n      opacity: 0.7;\r\n      text-decoration: none;\r\n    }  \r\n  }\r\n`;\r\nconst NavIcon = styled.div`\r\n`;\r\n\r\n\r\nclass NavItem extends React.Component {\r\n    handleClick = () => {\r\n        const { path, onItemClick } = this.props;\r\n        onItemClick(path);\r\n      }\r\n\r\n    render() {\r\n        const { active } = this.props;\r\n      return (\r\n        <StyledNavItem active={active}>\r\n        <Link to={this.props.path} className={this.props.css} onClick={this.handleClick}>\r\n          <NavIcon></NavIcon>\r\n        </Link>\r\n      </StyledNavItem>\r\n      );\r\n    }\r\n  }\r\n\r\nclass SideNav extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          activePath: props.location.pathname,\r\n          items: [\r\n            {\r\n              path: '/', /* path is used as id to check which NavItem is active basically */\r\n              name: 'Home',\r\n              css: 'fa fa-fw fa-home',\r\n              key: 1 \r\n            },\r\n            {\r\n              path: '/cookbook',\r\n              name: 'CookBook',\r\n              css: 'fa fa-fw fa-utensils',\r\n              key: 2\r\n            },\r\n            {\r\n              path: '/NoMatch',\r\n              name: 'NoMatch',\r\n              css: 'fas fa-search',\r\n              key: 3\r\n            },\r\n          ]\r\n        }  \r\n      }\r\n      onItemClick = (path) => {\r\n        this.setState({ activePath: path }); \r\n      }\r\n      \r\n    render() {\r\n        const { items, activePath } = this.state;\r\n      \r\n        return (\r\n            <StyledSideNav>\r\n            {                \r\n                items.map((item) => {               \r\n                return (\r\n                    <NavItem path={item.path} name={item.name} css={item.css} onItemClick={this.onItemClick} /* Simply passed an entire function to onClick prop */ active={item.path === activePath} key={item.key}/>\r\n                )\r\n                })\r\n            }\r\n            </StyledSideNav>\r\n  );\r\n      }\r\n}\r\n\r\n\r\nexport default class Sidebar extends React.Component {\r\n  render() {\r\n    const RouterSideNav = withRouter(SideNav);\r\n    return (\r\n        <RouterSideNav></RouterSideNav>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { NavigationBar } from './components/NavigationBar';\r\nimport { Home } from './components/Home';\r\nimport { CookBook } from './components/CookBook';\r\nimport { NoMatch } from './components/NoMatch';\r\nimport Sidebar from './components/Sidebar';\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n    <Router>\r\n    <NavigationBar />\r\n    <Sidebar />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/cookbook\" component={CookBook} />\r\n        <Route component={NoMatch} />\r\n      </Switch>\r\n\r\n    </Router>\r\n  </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}